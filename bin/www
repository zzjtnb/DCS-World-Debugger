#!/usr/bin/env node

//模块依赖(Module dependencies)
const app = require('../app').app;
const debug = require('debug')('dcs:server');
const { probe } = require('../utils/port');
const { appLog } = require('../middleware/logger');
//从环境获取端口并存储在Express中(Get port from environment and store in Express)
const port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

//创建HTTP服务器(Create HTTP server)
const server = require("../app").server;

//在所有网络接口上侦听提供的端口(Listen on provided port, on all network interfaces.)
server.listen(port, 'localhost');//显性提供IPV4
server.on('error', onError);
server.on('listening', onListening);

//将端口标准化为数字,字符串或false.(Normalize a port into a number, string, or false.)
function normalizePort(val) {
  const port = parseInt(val, 10);
  // 命名管道(named pipe)
  if (isNaN(port)) return val;
  //端口号(port number)
  if (port >= 0) return port;
  return false;
}
//HTTP服务器"错误"事件的事件侦听器(Event listener for HTTP server "error" event.)
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  //通过友好的消息处理特定的侦听错误(handle specific listen errors with friendly messages)
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' 需要提升的特权(requires elevated privileges)');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      appLog.error(bind + '已被占用正在重新获取地址...')
      // process.exit(1);
      probe(port, (bl, _pt) => {
        bl ? port : port = _pt + 1
        server.listen(port, () => {
          appLog.info(`WEB Server running at http://localhost:${port}`);
        })
      })
      break;
    default:
      throw error;
  }
}
// HTTP服务器"监听"事件的事件侦听。(Event listener for HTTP server "listening" event.)
function onListening() {
  const addr = server.address();
  appLog.info(`WEB Server running at http://localhost:${port}`);
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
